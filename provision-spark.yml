#!/usr/bin/env ansible-playbook
#
# (c) 2017 DataNexus Inc.  All Rights Reserved
---
# Build our spark and spark_master host groups
- name: Create spark and spark_master host groups
  hosts: localhost
  gather_facts: no
  tasks:
    # if we're using dynamic provisioning; build the host groups from the
    # meta-data associated with the matching nodes in the selected cloud
    - block:
      # load the 'local variables file', if one was defined, to get any variables
      # we might need from that file when constructing our host groups
      - name: Load local variables file
        include_vars:
          file: "{{local_vars_file}}"
        when: not (local_vars_file is undefined or local_vars_file is none or local_vars_file | trim == '')
      # then, build our host groups (spark_master, spark, and zookeeper)
      - include_role:
          name: build-app-host-groups
        vars:
          host_group_list:
            - { name: spark, role: master }
            - { name: spark }
            - name: zookeeper
      when: cloud is defined and (cloud == 'aws' or cloud == 'osp')

# Collect some Zookeeper related facts and determine the "private" IP addresses of
# the nodes in the Zookeeper ensemble (from their "public" IP addresses and the `data_iface`
# variable that was passed in as part of this playbook run) if a list of "public"  Zookeeper
# IP addresses was passed in.
- name: Gather facts from Zookeeper host group (if defined)
  hosts: zookeeper
  tasks: []

# if we're deploying a secure cluster, then generate a UUID that can be used
# to securely communicate between nodes (only nodes with this shared key will
# be able to communicate with other nodes in the cluster)
- name: Generate UUID to use as a shared secret
  hosts: spark_master:spark
  gather_facts: no
  pre_tasks:
    # first, initialize the play by loading any `local_vars_file` that may have
    # been passed in, restarting the network on the target nodes (if desired),
    # and determining the `data_iface` and `api_iface` values from the input
    # `iface_description_array` (if one was passed in)
    - include_role:
        name: initialize-play
      vars:
        skip_network_restart: true
    # then, if we're deploying a secure cluster, generate a UUID we can use
    # as a shared secret amongst the nodes of our cluster
    - set_fact:
        spark_cluster_secret: "{{ 9999999999999999999999 | random | to_uuid }}"
      run_once: true
      when: secure_cluster | default(false)

# Then, deploy Spark to the nodes in the spark_master host group
- name: Install/configure servers (master nodes)
  hosts: spark_master
  gather_facts: no
  vars_files:
    - vars/spark.yml
  vars:
    - combined_package_list: "{{ (default_packages|default([])) | union(spark_package_list) | union((install_packages_by_tag|default({})).spark|default([])) }}"
    - cluster_role: master
    - zookeeper_nodes: "{{groups['zookeeper'] | default([])}}"
    - spark_master_nodes: "{{groups['spark_master'] | default([])}}"
  pre_tasks:
    # first, initialize the play by loading any `local_vars_file` that may have
    # been passed in, restarting the network on the target nodes (if desired),
    # and determining the `data_iface` and `api_iface` values from the input
    # `iface_description_array` (if one was passed in)
    - include_role:
        name: initialize-play
    # and now that we know the name of our `data_iface`, we can construct the
    # list of zk_nodes (the data_iface IP addresses of our zookeeper_nodes) and
    # spark_master_data_ips (the data_iface IP addresses of the Spark master
    # node or nodes)
    - set_fact:
        zk_nodes: "{{zookeeper_nodes | map('extract', hostvars, [('ansible_' + data_iface), 'ipv4', 'address']) | list}}"
        spark_master_data_ips: "{{spark_master_nodes | map('extract', hostvars, ['ansible_' + data_iface, 'ipv4', 'address']) | list}}"
        spark_master_api_ips: "{{spark_master_nodes | map('extract', hostvars, ['ansible_' + api_iface, 'ipv4', 'address']) | list}}"
  # now that we have all of the facts we need, provision the input nodes
  roles:
    - role: provision-nodes

# Once the master nodes have been deployed, repeat the same process to deploy Spark to the nodes in
# the spark host group
- name: Install/configure servers (worker nodes)
  hosts: spark
  gather_facts: no
  vars_files:
    - vars/spark.yml
  vars:
    - combined_package_list: "{{ (default_packages|default([])) | union(spark_package_list) | union((install_packages_by_tag|default({})).spark|default([])) }}"
    - zookeeper_nodes: "{{groups['zookeeper'] | default([])}}"
    - spark_master_nodes: "{{groups['spark_master'] | default([])}}"
  pre_tasks:
    # first, initialize the play by loading any `local_vars_file` that may have
    # been passed in, restarting the network on the target nodes (if desired),
    # and determining the `data_iface` and `api_iface` values from the input
    # `iface_description_array` (if one was passed in)
    - include_role:
        name: initialize-play
    # and now that we know the name of our `data_iface`, we can construct the
    # list of zk_nodes (the data_iface IP addresses of our zookeeper_nodes) and
    # spark_master_data_ips (the data_iface IP addresses of the Spark master
    # node or nodes)
    - set_fact:
        zk_nodes: "{{zookeeper_nodes | map('extract', hostvars, [('ansible_' + data_iface), 'ipv4', 'address']) | list}}"
        spark_master_data_ips: "{{spark_master_nodes | map('extract', hostvars, ['ansible_' + data_iface, 'ipv4', 'address']) | list}}"
        spark_master_api_ips: "{{spark_master_nodes | map('extract', hostvars, ['ansible_' + api_iface, 'ipv4', 'address']) | list}}"
  # now that we have all of the facts we need, provision the input nodes
  roles:
    - role: provision-nodes
